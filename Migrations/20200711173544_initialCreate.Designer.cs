// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smtih_Midterm.Models;

namespace Smtih_Midterm.Migrations
{
    [DbContext(typeof(HouseContext))]
    [Migration("20200711173544_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Smtih_Midterm.Models.Info", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BathCount")
                        .HasColumnType("int");

                    b.Property<int>("BedRCount")
                        .HasColumnType("int");

                    b.Property<string>("CodeIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("SqFt")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("HouseId");

                    b.HasIndex("RegionId");

                    b.ToTable("Infos");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            Address = "3456 washtheroad rd",
                            BathCount = 3,
                            BedRCount = 4,
                            CodeIn = "unkown in",
                            CodeOut = "unkown out",
                            Price = 12000,
                            RegionId = 1,
                            SqFt = 12345,
                            Year = 2019
                        });
                });

            modelBuilder.Entity("Smtih_Midterm.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Name = "Richmond"
                        },
                        new
                        {
                            RegionId = 2,
                            Name = "Columbia"
                        });
                });

            modelBuilder.Entity("Smtih_Midterm.Models.Info", b =>
                {
                    b.HasOne("Smtih_Midterm.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
